// <auto-generated />
using System;
using BookStore.Infrastructure.Persistance.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BookStore.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230804080345_add new table")]
    partial class addnewtable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BookStore.Domain.Entities.BookAuthorEntity", b =>
                {
                    b.Property<Guid>("AuthorGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.HasKey("AuthorGuid", "BookGuid");

                    b.HasIndex("BookGuid");

                    b.ToTable("BooksAuthors");
                });

            modelBuilder.Entity("BookStore.Domain.Entities.BookEntity", b =>
                {
                    b.Property<Guid>("BookGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BookFakeName")
                        .HasColumnType("text");

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CategoryGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("ISBN10")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ISBN13")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PagesCount")
                        .HasColumnType("integer");

                    b.Property<string>("PublishYear")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PublisherGuid")
                        .HasColumnType("uuid");

                    b.HasKey("BookGuid");

                    b.HasIndex("CategoryGuid");

                    b.HasIndex("PublisherGuid");

                    b.ToTable("Books", (string)null);
                });

            modelBuilder.Entity("BookStore.Domain.Entities.CategoryEntity", b =>
                {
                    b.Property<Guid>("CategoryGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CategoryGuid");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("BookStore.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BookStore.Domain.Entities.UserBookEntity", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("BookId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBooks");
                });

            modelBuilder.Entity("BookStore.Domain.Entities.BookAuthorEntity", b =>
                {
                    b.HasOne("BookStore.Domain.Entities.User", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStore.Domain.Entities.BookEntity", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookStore.Domain.Entities.BookEntity", b =>
                {
                    b.HasOne("BookStore.Domain.Entities.CategoryEntity", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStore.Domain.Entities.User", "Publisher")
                        .WithMany("PublisherBooks")
                        .HasForeignKey("PublisherGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("BookStore.Domain.Entities.UserBookEntity", b =>
                {
                    b.HasOne("BookStore.Domain.Entities.BookEntity", "Book")
                        .WithMany("UserBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStore.Domain.Entities.User", "User")
                        .WithMany("UserBooks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookStore.Domain.Entities.BookEntity", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("UserBooks");
                });

            modelBuilder.Entity("BookStore.Domain.Entities.CategoryEntity", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookStore.Domain.Entities.User", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("PublisherBooks");

                    b.Navigation("UserBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
